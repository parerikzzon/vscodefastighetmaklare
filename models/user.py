# models/user.py
"""
üë§ ANV√ÑNDARE-MODELL - Beskriver hur en anv√§ndare ser ut i databasen.

FOKUS:
1. Definiera tabellstrukturen f√∂r anv√§ndare.
2. Integrera med Flask-Login genom att √§rva fr√•n UserMixin.
3. Hantera f√§lten 'username' (unikt) och 'password' (med S√ÑKERHETSVARNING).
"""
# Importera UserMixin fr√•n Flask-Login f√∂r att ge User-klassen autentiseringsfunktionalitet
from flask_login import UserMixin
# Importera 'db' (SQLAlchemy-instansen)
from database import db
# Gl√∂m inte att installera: py -m pip install flask-login 

class User(db.Model, UserMixin):
    """
    User-modellen representerar EN anv√§ndare i databasen.
    √Ñrver fr√•n db.Model (SQLAlchemy) och UserMixin (Flask-Login).
    """
    # Ber√§ttar f√∂r SQLAlchemy vilket tabellnamn vi vill ha
    __tablename__ = 'users'

    # -----------------------------------------------------------------
    # KOLUMNER (F√§lt)
    # -----------------------------------------------------------------
    # id: Prim√§rnyckel, Flask-Login anv√§nder detta f√∂r att hantera sessioner
    id = db.Column(db.Integer, primary_key=True)
    
    # username: Anv√§ndarnamnet m√•ste vara unikt och f√•r inte vara tomt
    username = db.Column(db.String(50), unique=True, nullable=False)
    
    # password: L√∂senordet. Ska vara lagrat som en hashad str√§ng (inte i klartext!).
    # db.String(100) ger plats f√∂r en hashad version (som bcrypt).
    password = db.Column(db.String(100), nullable=False) 
    
    # role: Anv√§nds f√∂r beh√∂righetskontroll (t.ex. 'admin', 'user')
    role = db.Column(db.String(20), nullable=False)

    # -----------------------------------------------------------------
    # FLASK-LOGIN FUNKTIONALITET
    # -----------------------------------------------------------------
    def get_id(self):
        """
        Denna metod KR√ÑVS av Flask-Login. 
        Den returnerar anv√§ndarens ID som en str√§ng f√∂r att hantera sessionen.
        """
        return str(self.id)
    
    def __repr__(self):
        """Hur objektet visas n√§r vi printar det (f√∂r debugging)"""
        return f'<User {self.username} ({self.role})>'


# ============================================================
# STARTDATA F√ñR ANV√ÑNDARE (Seeding Data)
# ============================================================

STARTDATA_USERS = [
    {
        'username': 'pei',
        # S√ÑKERHETSVARNING: Dessa l√∂senord √§r i KLARTEXT. 
        # I ett produktionssystem M√ÖSTE l√∂senorden hash-as INNAN de sparas.
        'password': '1234', 
        'role': 'admin',
        
    },
    {
        'username': 'pdo',
        'password': '123',
        'role': 'user',
        
    },
]


def skapa_start_users():
    """
    L√§gger till startdata f√∂r anv√§ndare i databasen ENDAST OM tabellen √§r tom.
    """
    # 1. Kolla om tabellen redan har data
    antal_users = User.query.count()

    if antal_users == 0:
        print("üì¶ L√§gger till startdata f√∂r users...")

        # 2. Loopa genom startdata och skapa User-objekt
        for data in STARTDATA_USERS:
            # Skapa objekt med data (inklusive klartextl√∂senordet i detta exempel)
            ny_user = User(
                username=data['username'],
                password=data['password'],
                role=data['role']
            )
            db.session.add(ny_user)

        # 3. Spara alla till databasen
        db.session.commit()
        print(f"‚úì Lade till {len(STARTDATA_USERS)} users")
    else:
        print(f"‚úì Tabellen 'users' har redan {antal_users} rader. Ingen startdata lades till.")