# models/kommentar.py
"""
üí¨ KOMMENTAR-MODELL - Beskriver hur en kommentar ser ut i databasen.

FOKUS:
1. Definiera tabellstrukturen f√∂r kommentarer.
2. S√§tta upp en Fr√§mmande Nyckel (nyhet_id) f√∂r att l√§nka till Nyhet-tabellen.
3. Hantera tidsst√§mpling (datum) automatiskt.

OBS! Denna fil hanterar INTE logiken f√∂r att h√§mta eller spara kommentarer.
Det sk√∂ts av KommentarRepository.
"""
# Importera 'db' (SQLAlchemy-instansen)
from database import db
# Importera datetime-modulen f√∂r att kunna s√§tta aktuellt datum automatiskt
from datetime import datetime


class Kommentar(db.Model):
    """
    Kommentar-modellen representerar EN kommentar i databasen.
    √Ñrver fr√•n db.Model f√∂r att hantera ORM-mappningen.
    """
    # Ber√§ttar f√∂r SQLAlchemy vilket tabellnamn vi vill ha
    __tablename__ = 'kommentarer'

    # -----------------------------------------------------------------
    # KOLUMNER (F√§lt)
    # -----------------------------------------------------------------
    # id: Prim√§rnyckel
    id = db.Column(db.Integer, primary_key=True)
    
    # namn: Vem som skrev kommentaren
    namn = db.Column(db.String(100), nullable=False)
    
    # innehall: Sj√§lva kommentaren (l√•ng text)
    innehall = db.Column(db.Text, nullable=False)
    
    # datum: Tidsst√§mpling.
    # db.DateTime lagrar datum och tid.
    # default=datetime.now: VIKTIGT! S√§tter automatiskt in aktuell tid
    # N√ÑR objektet skapas (INSERT) om inget datum specificeras manuellt.
    datum = db.Column(db.DateTime, nullable=False, default=datetime.now)
    
    # -----------------------------------------------------------------
    # FR√ÑMMANDE NYCKEL (RELATION)
    # -----------------------------------------------------------------
    # nyhet_id: Detta f√§lt l√§nkar kommentaren till en specifik Nyhetsartikel.
    # db.ForeignKey('nyheter.id'): Skapar l√§nken till Prim√§rnyckeln 'id'
    # i tabellen som heter 'nyheter'. Denna kolumn √§r Fr√§mmande Nyckel (FK).
    nyhet_id = db.Column(db.Integer, db.ForeignKey('nyheter.id'), nullable=False)

    # -----------------------------------------------------------------
    # RELATIONSF√ÑLT (Valfritt h√§r, men definieras oftast i Nyhet-modellen)
    # -----------------------------------------------------------------
    # H√§r skulle vi KUNNA definiera en "backref" till Nyhet, men det √§r vanligare
    # att g√∂ra detta i den andra √§nden av relationen (i Nyhet-modellen).

    def __repr__(self):
        """Hur objektet visas n√§r vi printar det (f√∂r debugging)"""
        return f'<Kommentar {self.id} av {self.namn} till Nyhet {self.nyhet_id}>'

# (H√§r skulle funktionen f√∂r att l√§gga till startdata ligga, om s√•dan beh√∂vdes.)
# Finns nu i nyheter ist√§llet 