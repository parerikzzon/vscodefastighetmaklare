# dbrepositories/models/bostad.py
"""
üè† BOSTAD-MODELL - Beskriver hur en bostad ser ut i databasen (Schema Definition).

SINGLE RESPONSIBILITY: Denna fil har ENDAST ansvar f√∂r:
1. Definiera strukturen p√• 'bostader'-tabellen (kolumner, datatyper).
2. Tillhandah√•lla startdata (seeding data) f√∂r att fylla databasen vid f√∂rsta k√∂rningen.

OBS! Denna fil har INGEN aff√§rslogik, rutter eller CRUD-operationer!
Den sk√∂ts av BostadRepository.
"""
# Importera 'db' som √§r instansen av SQLAlchemy (eller Flask-SQLAlchemy)
from database import db
# Importera n√∂dv√§ndiga funktioner (i detta fall, inga extra beh√∂vs)


class Bostad(db.Model):
    """
    Bostad-modellen representerar EN bostad i databasen.
    √Ñrver fr√•n db.Model f√∂r att f√• alla ORM-funktionaliteter.

    Varje rad i tabellen 'bostader' blir ett Bostad-objekt i Python.
    """
    # Ber√§ttar f√∂r SQLAlchemy vilket tabellnamn vi vill ha i databasen
    __tablename__ = 'bostader'

    # -----------------------------------------------------------------
    # KOLUMNDELAR (Tabellschema)
    # -----------------------------------------------------------------
    # id: Prim√§rnyckel (unikt ID)
    id = db.Column(db.Integer, primary_key=True)
    
    # adress: Str√§ng (max 200 tecken), M√ÖSTE fyllas i (nullable=False)
    adress = db.Column(db.String(200), nullable=False)
    
    # stad: Str√§ng (max 100 tecken), M√ÖSTE fyllas i
    stad = db.Column(db.String(100), nullable=False)
    
    # pris: Sparas som str√§ng eftersom valutor ofta inneh√•ller mellanslag/tecken
    pris = db.Column(db.String(50), nullable=False)
    
    # rum: Heltal
    rum = db.Column(db.Integer, nullable=False)
    
    # yta: Heltal (kvadratmeter)
    yta = db.Column(db.Integer, nullable=False)
    
    # beskrivning: L√•ng textstr√§ng (Text), valfri (nullable √§r True som standard)
    beskrivning = db.Column(db.Text)

    # -----------------------------------------------------------------
    # RELATIONER (L√§ggs till senare om Bostad har FK till t.ex. M√§klare)
    # -----------------------------------------------------------------
    
    def __repr__(self):
        """
        Denna metod definierar hur objektet visas n√§r vi printar det (anv√§nds f√∂r debugging).
        Ger en l√§sbar representation av objektet.
        """
        return f'<Bostad {self.adress}, {self.stad}, {self.pris}>'


# ============================================================
# STARTDATA (Seeding Data)
# ============================================================

STARTDATA_BOSTADER = [
    {
        'adress': 'Storgatan 15A',
        'stad': 'Borl√§nge',
        'pris': '1 950 000 kr',
        'rum': 3,
        'yta': 75,
        'beskrivning': 'Trevlig l√§genhet med balkong och centralt l√§ge. Perfekt f√∂r pendlaren.'
    },
    {
        'adress': 'Ekbacken 4',
        'stad': 'Falun',
        'pris': '4 200 000 kr',
        'rum': 6,
        'yta': 150,
        'beskrivning': 'Frist√•ende villa med stor tr√§dg√•rd och sj√∂utsikt. Ett m√•ste f√∂r barnfamiljen.'
    },
    {
        'adress': 'Sj√∂v√§gen 88',
        'stad': 'Leksand',
        'pris': '3 100 000 kr',
        'rum': 4,
        'yta': 98,
        'beskrivning': 'Radhus med utsikt √∂ver Siljan och n√§ra till service. Lugnt och sk√∂nt omr√•de.'
    },
    {
        'adress': '√Ösgatan 2',
        'stad': 'S√§ter',
        'pris': '850 000 kr',
        'rum': 2,
        'yta': 55,
        'beskrivning': 'Mindre l√§genhet, perfekt som f√∂rsta bostad. L√•ga driftkostnader.'
    }
]


def skapa_start_bostader():
    """
    Funktion som k√∂rs f√∂r att s√§kerst√§lla att tabellen 'bostader' har grunddata.
    L√§gger till startdata i databasen ENDAST OM tabellen √§r tom.
    """
    # Anv√§nder Repository-logik (men koden finns i modellen)
    # 1. Fr√•ga databasen hur m√•nga rader som finns
    antal_bostader = Bostad.query.count()

    if antal_bostader == 0:
        print("üì¶ L√§gger till startdata f√∂r bost√§der...")

        # 2. Skapa ett Bostad-objekt f√∂r varje dictionary i listan
        for data in STARTDATA_BOSTADER:
            ny_bostad = Bostad(
                adress=data['adress'],
                stad=data['stad'],
                pris=data['pris'],
                rum=data['rum'],
                yta=data['yta'],
                beskrivning=data['beskrivning']
            )
            db.session.add(ny_bostad) # L√§gger till objektet i transaktionen

        # 3. Spara alla nya objekt permanent till databasen
        db.session.commit()
        print(f"‚úì Lade till {len(STARTDATA_BOSTADER)} bost√§der")
    else:
        print(f"‚úì Tabellen 'bostader' har redan {antal_bostader} rader. Ingen startdata lades till.")