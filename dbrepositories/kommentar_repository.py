# dbrepositories/kommentar_repository.py
"""
游눫 KOMMENTAR REPOSITORY - Hanterar ALL databas친tkomst f칬r kommentarer.

SYFTE: Att isolera all logik som r칬r sparande, h칛mtning och hantering av
kommentarobjekt i databasen. Den fungerar som datalagret f칬r alla kommentarer.

FOKUS: CRUD-operationer (hittills endast READ och CREATE) f칬r objektet Kommentar,
med s칛rskilt fokus p친 relationen till en Nyhet.
"""

# Importera Kommentar-modellen (klassen som representerar 'kommentar' tabellen i databasen)
from models.kommentar import Kommentar
# Importera databasobjektet (SQLAlchemy-sessionen)
from database import db


class KommentarRepository:
    """
    Repository-klass f칬r Kommentar.
    Inneh친ller alla databasoperationer (CRUD).
    """

    def hamta_alla_for_nyhet(self, nyhet_id):
        """
        H칛mtar ALLA kommentarer som 칛r kopplade till en specifik nyhetsartikel.

        Detta 칛r en s칬kfr친ga baserad p친 en RELATION (nyhet_id 칛r en fr칛mmande nyckel).

        Args:
            nyhet_id (int): ID f칬r nyhetsartikeln vars kommentarer ska h칛mtas.

        Returns:
            list: En sorterad lista med Kommentar-objekt.
        """
        # 1. Kommentar.query: Startar databasfr친gan (SELECT * FROM kommentar).
        # 2. .filter_by(nyhet_id=nyhet_id): L칛gger till villkoret (WHERE nyhet_id = X).
        # 3. .order_by(Kommentar.datum.asc()): Sorterar resultatet.
        #    - Kommentar.datum: F칛ltet i tabellen som ska sorteras.
        #    - .asc(): Sorterar i stigande ordning (Ascending), t.ex. 칛ldsta f칬rst.
        # 4. .all(): Exekverar fr친gan och returnerar resultaten som en lista.
        return Kommentar.query.filter_by(nyhet_id=nyhet_id).order_by(Kommentar.datum.asc()).all()

    def skapa_ny(self, nyhet_id, data):
        """
        Skapar en NY kommentar i databasen och kopplar den till en nyhetsartikel (INSERT-operation).
        Kommentaren f친r automatiskt ett datum (om modellen 칛r konfigurerad f칬r det).

        Args:
            nyhet_id (int): ID f칬r nyhetsartikeln som kommentaren tillh칬r (Fr칛mmande Nyckel).
            data (dict): Dictionary med kommentar-information (t.ex. 'namn' och 'innehall').

        Returns:
            Kommentar: Den nya Kommentar-instansen som skapades.
        """
        # Skapa en ny instans av Kommentar-modellen.
        ny_kommentar = Kommentar(
            namn=data['namn'],
            innehall=data['innehall'],
            # VIKTIGT: S칛tter Fr칛mmande Nyckel (FK) f칬r att l칛nka kommentaren till r칛tt nyhet.
            nyhet_id=nyhet_id
        )

        # 1. L칛gg till i session: F칬rbereder objektet f칬r att sparas.
        db.session.add(ny_kommentar)
        # 2. Spara/Committa: Utf칬r den faktiska INSERT-fr친gan till databasen.
        db.session.commit()

        return ny_kommentar


# Skapa EN instans av repository som kan anv칛ndas 칬verallt
# Denna instans ska importeras av andra moduler (t.ex. views/controllers)
# f칬r att hantera kommentarer utan att beh칬va skapa en ny instans varje g친ng.
kommentar_repo = KommentarRepository()