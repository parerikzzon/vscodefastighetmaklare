# dbrepositories/nyhet_repository.py
"""
游닗 NYHET REPOSITORY - Ansvarar f칬r ALL databas친tkomst f칬r nyheter.

FOKUS: CRUD-operationer och, VIKTIGT, optimering av h칛mtning av relaterade data
(som M칛klare och Kommentarer) f칬r att h친lla webbplatsen snabb.

SINGLE RESPONSIBILITY: Precis som de andra repositorierna, hanterar denna fil
ENDAST databasinteraktioner och 칛r helt oberoende av webbrouting.
"""

# Importera Nyhet-modellen
from models.nyhet import Nyhet
# Importera databasobjektet (session-hanteraren)
from database import db
# VIKTIGT: Importera SQLAlchemy-verktyg f칬r Eager Loading (laddning av relationer)
from sqlalchemy.orm import joinedload, selectinload


class NyhetRepository:
    """
    Repository-klass f칬r Nyhet.
    Inneh친ller alla databasoperationer (CRUD).
    """

    def hamta_alla(self):
        """
        H칛mtar ALLA nyheter fr친n databasen.
        Denna metod anv칛nds n칛r vi bara beh칬ver nyhetsdatan sj칛lvt (titel, inneh친ll).

        Sortering: Nyast f칬rst (.desc() = Descending, fallande).

        Returns:
            list: Lista med alla Nyhet-objekt, sorterade efter datum.
        """
        # Sorterar baserat p친 'datum'-f칛ltet i fallande ordning.
        return Nyhet.query.order_by(Nyhet.datum.desc()).all()

    def hamta_alla_med_relationer(self):
        """
        H칛mtar ALLA nyheter OCH deras relaterade data (M칛klare och Kommentarer)
        i ett optimerat antal databasfr친gor.

        OPTIMERING (Eager Loading f칬r att undvika N+1-problem):
        - joinedload(Nyhet.maklare): Utf칬r en SQL JOIN. Laddar M칛klarens data
          i SAMMA fr친ga som nyheten h칛mtas. Effektivt f칬r One-to-One eller Many-to-One relationer.
        - selectinload(Nyhet.kommentarer): Utf칬r en SEPARAT, men OPTIMERAD, fr친ga.
          Den h칛mtar alla kommentarer f칬r alla nyheter som hittades i EN fr친ga.
          Effektivt f칬r One-to-Many relationer (som Nyhet -> Kommentarer).

        Returns:
            list: Lista med Nyhet-objekt d칛r varje Nyhet-objekt redan har sin M칛klare
                  och sina Kommentarer inl칛sta.
        """
        return Nyhet.query \
            .options(
                # Ladda den enskilda M칛klaren som 칛r kopplad till nyheten
                joinedload(Nyhet.maklare),
                # Ladda alla kommentarer som 칛r kopplade till nyheten
                selectinload(Nyhet.kommentarer)
            ) \
            .order_by(Nyhet.datum.desc()).all()

    def hamta_en(self, nyhet_id):
        """
        H칛mtar EN specifik nyhet baserat p친 ID (utan att ladda relationer).

        Args:
            nyhet_id (int): ID f칬r nyheten.

        Returns:
            Nyhet: Nyhet-objektet, eller None.
        """
        return Nyhet.query.get(nyhet_id)

    def hamta_eller_404(self, nyhet_id):
        """
        H칛mtar EN nyhet eller utl칬ser 404-fel. Anv칛nds ofta i detaljvyer.

        Args:
            nyhet_id (int): ID f칬r nyheten.

        Returns:
            Nyhet: Nyhet-objektet (garanterat att existera).
        """
        return Nyhet.query.get_or_404(nyhet_id)

    def skapa_ny(self, data):
        """
        Skapar en NY nyhet i databasen (INSERT).

        Args:
            data (dict): Dictionary med titel, inneh친ll och maklare_id.

        Returns:
            Nyhet: Den nya Nyhet-instansen.
        """
        ny_nyhet = Nyhet(
            titel=data['titel'],
            innehall=data['innehall'],
            # St칛ller in Fr칛mmande Nyckel (FK) f칬r relationen till M칛klaren.
            maklare_id=data.get('maklare_id')
        )

        # 1. L칛gg till i session.
        db.session.add(ny_nyhet)
        # 2. Commit: Spara permanent.
        db.session.commit()
        return ny_nyhet

    def radera(self, nyhet_id):
        """
        Raderar en nyhet fr친n databasen (DELETE).

        Args:
            nyhet_id (int): ID f칬r nyheten att radera.

        Returns:
            bool: True om radering lyckades, False om nyheten inte fanns.
        """
        nyhet = Nyhet.query.get(nyhet_id)
        if nyhet:
            db.session.delete(nyhet)
            # VIKTIGT: Detta kan ocks친 radera relaterade kommentarer
            # om din Nyhet-modell har 'cascade="all, delete-orphan"' inst칛llt.
            db.session.commit()
            return True
        return False

    # Du kan enkelt l칛gga till en uppdatera-metod (se t.ex. MaklareRepository) h칛r vid behov.
    def uppdatera(self, nyhet_id, data):
        """
        Uppdaterar en BEFINTLIG nyhet (UPDATE).
        """
        nyhet = Nyhet.query.get(nyhet_id)
        if nyhet:
            nyhet.titel = data['titel']
            nyhet.innehall = data['innehall']
            nyhet.maklare_id = data.get('maklare_id') # Uppdatera 칛ven m칛klaren vid behov
            db.session.commit()
            return nyhet
        return None


# Skapa EN instans av repository som kan anv칛ndas 칬verallt
nyhet_repo = NyhetRepository()