# dbrepositories/user_repository.py
"""
游녻 ANV츿NDARE REPOSITORY - Ansvarar f칬r ALL databas친tkomst f칬r anv칛ndare.

S츿KERHETSANM츿RKNING:
Detta repository hanterar l칬senordsf칛ltet ('password'). I en verklig applikation
SKULLE INTE det faktiska, okrypterade l칬senordet sparas i databasen.
L칬senordet m친ste hashas och saltas INNAN det skickas till denna 'skapa_ny' metod.
Detta repository hanterar dock enbart databasoperationerna (CRUD).

SINGLE RESPONSIBILITY: ENDAST databasoperationer (CREATE, READ, UPDATE, DELETE).
"""

# Importera User-modellen (klassen som representerar 'user' tabellen)
from models.user import User
# Importera databasobjektet (session-hanteraren)
from database import db


class UserRepository:
    """
    Repository-klass f칬r User.
    Inneh친ller alla databasoperationer (CRUD).
    """

    def hamta_alla(self):
        """
        H칛mtar ALLA anv칛ndare fr친n databasen.

        Returns:
            list: Lista med alla User-objekt.
        """
        return User.query.all()

    def hamta_en(self, user_id):
        """
        H칛mtar EN specifik anv칛ndare baserat p친 ID (Prim칛rnyckel).

        Args:
            user_id (int): ID f칬r anv칛ndaren.

        Returns:
            User: User-objektet, eller None om det inte finns.
        """
        return User.query.get(user_id)

    def hamta_eller_404(self, user_id):
        """
        H칛mtar EN anv칛ndare eller utl칬ser 404-fel. Anv칛ndbar f칬r admin-gr칛nssnitt.

        Args:
            user_id (int): ID f칬r anv칛ndaren.

        Returns:
            User: User-objektet (garanterat att existera).
        """
        return User.query.get_or_404(user_id)

    def hamta_user_username(self, username):
        """
        H칛mtar EN anv칛ndare baserat p친 dess UNIKA anv칛ndarnamn.
        Detta 칛r den prim칛ra s칬kmetoden som anv칛nds vid inloggning.

        Args:
            username (str): Anv칛ndarnamnet att s칬ka efter.

        Returns:
            User: User-objektet, eller None om anv칛ndarnamnet inte hittas.
        """
        # 1. .filter_by(username=username): L칛gger till villkoret WHERE username = '...'
        # 2. .first(): Exekverar fr친gan och returnerar ENDAST det f칬rsta matchande resultatet.
        #    (Detta f칬ruts칛tter att 'username' 칛r unikt i databasen.)
        user = User.query.filter_by(username=username).first()

        if user:
            return user
        return None # Returnerar None explicit om ingen anv칛ndare hittades.

    def skapa_ny(self, data):
        """
        Skapar en NY anv칛ndare i databasen (INSERT).

        Args:
            data (dict): Dictionary med user-information (username, password, role).

        Returns:
            User: Den nya User-instansen.
        """
        # Skapa en ny instans av User-modellen.
        ny_user = User(
            username=data['username'],
            # VIKTIGT: F칛ltet 'password' b칬r vara hashat och saltat av en annan funktion
            # INNAN det n친r detta lager. H칛r sparas bara det v칛rde som skickas in.
            password=data['password'],
            # 'role' anv칛nds ofta f칬r beh칬righetskontroll (t.ex. 'admin', 'standard').
            roll=data['role'],
        )

        # 1. L칛gg till i session.
        db.session.add(ny_user)
        # 2. Commit: Spara permanent.
        db.session.commit()

        return ny_user

    def uppdatera(self, user_id, data):
        """
        Uppdaterar en BEFINTLIG anv칛ndare (UPDATE-operation).

        Args:
            user_id (int): ID f칬r anv칛ndaren att uppdatera.
            data (dict): Ny data.

        Returns:
            User: Den uppdaterade anv칛ndaren, eller None.
        """
        user = User.query.get(user_id)

        if user:
            # Uppdatera alla f칛lt p친 objektet.
            user.username = data['username']
            # Uppdatera l칬senord (OBS: data['password'] m친ste vara det nya hashede v칛rdet)
            user.password = data['password']
            user.role = data['role']

            # Spara 칛ndringarna
            db.session.commit()

        return user

    def radera(self, user_id):
        """
        Raderar en anv칛ndare fr친n databasen (DELETE).

        Args:
            user_id (int): ID f칬r anv칛ndaren att radera.

        Returns:
            bool: True om radering lyckades, False om anv칛ndaren inte fanns.
        """
        user = User.query.get(user_id)

        if user:
            db.session.delete(user)
            # Commit: Utf칬r DELETE.
            db.session.commit()
            return True

        return False


# Skapa EN instans av repository som kan anv칛ndas 칬verallt
user_repo = UserRepository()