# dbrepositories/maklare_repository.py
"""
游녮 M츿KLARE REPOSITORY - Ansvarar f칬r ALL databas친tkomst f칬r m칛klare.

DETTA 츿R ETT DESIGNM칐NSTER (Repository Pattern):
Syftet 칛r att h친lla all databaslogik p친 ett st칛lle. Resten av applikationen
(som visar upp webbsidor) vet bara att den fr친gar en 'MaklareRepository' om data.

SINGLE RESPONSIBILITY (Enkelt ansvar): Denna fil har ENDAST ansvar f칬r:
- H칛mta data fr친n databasen (READ)
- L칛gga till ny data (CREATE)
- Uppdatera befintlig data (UPDATE)
- Ta bort data (DELETE)

Denna fil ska ALDRIG hantera webb- eller anv칛ndarinteraktionslogik.
"""

# Importera Maklare-modellen (klassen som representerar 'maklare' tabellen)
from models.maklare import Maklare
# Importera databasobjektet (session-hanteraren)
from database import db


class MaklareRepository:
    """
    Repository-klass f칬r M칛klare.
    Inneh친ller alla standardiserade databasoperationer (CRUD).
    """

    def hamta_alla(self):
        """
        H칛mtar ALLA m칛klare fr친n databasen (SELECT * FROM maklare).

        Returns:
            list: En lista med alla Maklare-objekt.
        """
        # Maklare.query 칛r startpunkten f칬r att bygga databasfr친gan.
        # .all() exekverar fr친gan och returnerar en lista.
        return Maklare.query.all()

    def hamta_en(self, maklare_id):
        """
        H칛mtar EN specifik m칛klare baserat p친 ID (Prim칛rnyckel).

        Args:
            maklare_id (int): ID (heltal) f칬r m칛klaren att hitta.

        Returns:
            Maklare: M칛klare-objektet om det hittas, annars Python-v칛rdet None.
        """
        # .get(id) 칛r det snabbaste s칛ttet att sl친 upp en rad i databasen via Prim칛rnyckeln.
        return Maklare.query.get(maklare_id)

    def hamta_eller_404(self, maklare_id):
        """
        H칛mtar EN m칛klare eller utl칬ser ett 404-fel (om du anv칛nder en webbramverk t.ex. Flask).
        Detta sparar dig fr친n att beh칬va skriva if/else-logik f칬r att kontrollera om objektet finns.

        Args:
            maklare_id (int): ID f칬r m칛klaren.

        Returns:
            Maklare: Det hittade Maklare-objektet.

        Raises:
            404: Om ID:t inte finns i databasen.
        """
        # Funktionen sk칬ter b친de s칬kning och felhantering.
        return Maklare.query.get_or_404(maklare_id)

    def skapa_ny(self, data):
        """
        Skapar en NY m칛klare i databasen (INSERT-operation).

        Args:
            data (dict): Dictionary som inneh친ller obligatoriska och valfria f칛lt.

        Returns:
            Maklare: Den nya Maklare-instansen som nu 칛r sparad i databasen.
        """
        # Skapa en ny Python-instans av modellen.
        ny_maklare = Maklare(
            namn=data['namn'],
            epost=data['epost'],
            # Anv칛nder .get() med tom str칛ng som standard f칬r valfria f칛lt.
            telefon=data.get('telefon', ''),
            titel=data.get('titel', ''),
            beskrivning=data.get('beskrivning', '')
        )

        # 1. L칛gg till i session: F칬rbereder SQL INSERT-fr친gan.
        db.session.add(ny_maklare)
        # 2. Commit: Exekverar fr친gan och sparar permanent i databasen.
        db.session.commit()

        return ny_maklare

    def uppdatera(self, maklare_id, data):
        """
        Uppdaterar en BEFINTLIG m칛klare baserat p친 ID (UPDATE-operation).

        Args:
            maklare_id (int): ID f칬r m칛klaren att uppdatera.
            data (dict): Ny data som ska ers칛tta den gamla.

        Returns:
            Maklare: Den uppdaterade m칛klaren, eller None om den inte hittades.
        """
        # Steg 1: H칛mta det befintliga objektet.
        maklare = Maklare.query.get(maklare_id)

        if maklare:
            # Steg 2: Uppdatera f칛lten p친 Python-objektet.
            maklare.namn = data['namn']
            maklare.epost = data['epost']
            maklare.telefon = data.get('telefon', '')
            maklare.titel = data.get('titel', '')
            maklare.beskrivning = data.get('beskrivning', '')

            # Steg 3: Commit: Skickar 칛ndringarna (UPDATE-fr친gan) till databasen.
            db.session.commit()

        return maklare

    def radera(self, maklare_id):
        """
        Raderar en m칛klare fr친n databasen (DELETE-operation).

        Args:
            maklare_id (int): ID f칬r m칛klaren att radera.

        Returns:
            bool: True om raderingen lyckades, False om m칛klaren inte fanns.
        """
        # Steg 1: H칛mta objektet f칬r att kontrollera att det finns.
        maklare = Maklare.query.get(maklare_id)

        if maklare:
            # Steg 2: Markera objektet f칬r radering.
            db.session.delete(maklare)
            # Steg 3: Commit: Utf칬r den faktiska DELETE-fr친gan.
            db.session.commit()
            return True

        return False


# Skapa EN instans av repository
# Detta 칛r den enda instansen som applikationen beh칬ver f칬r att prata med Maklare-databasen.
maklare_repo = MaklareRepository()