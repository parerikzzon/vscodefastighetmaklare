# blueprints/admin/admin_routes.py
"""
üõ†Ô∏è ADMIN ROUTES - Hanterar URL:er f√∂r att ADMINISTRERA bost√§der (CRUD).

SYFTE: Fungera som "Controller"-lagret. Tar emot HTTP-f√∂rfr√•gningar, 
hanterar anv√§ndarinteraktioner (formul√§r) och anropar databasoperationer via Repository.

DESIGNPRINCIP: Denna fil g√∂r INGA direkta databasoperationer!
Den anv√§nder ENBART den importerade instansen 'bostad_repo' f√∂r all databas√•tkomst.

CRUD = Create, Read, Update, Delete
"""
# Importera standard Flask-funktioner
from flask import render_template, request, redirect, url_for, abort, flash
# Importera blueprint-instansen och det n√∂dv√§ndiga repositoryt fr√•n __init__.py
from . import admin_bp, bostad_repo
# Importera autentiseringsfunktioner fr√•n Flask-Login
from flask_login import login_required, current_user 


# ============================================================
# 1. LISTA (READ) - Visa alla bost√§der f√∂r admin
# ============================================================

# @admin_bp.route('/') skapar den fullst√§ndiga URL:en /admin/ (om prefixet √§r /admin)
@admin_bp.route('/')
# login_required s√§kerst√§ller att ENDAST inloggade anv√§ndare kan n√• denna vy
@login_required 
def admin_lista_bostader():
    """
    Visar ALLA bost√§der i admin-l√§ge, som en tabell med redigerings- och raderingsl√§nkar.

    URL: /admin/
    """
    # 1. Anropa Repository (Service Layer) f√∂r att h√§mta data
    alla_bostader = bostad_repo.hamta_alla()

    # 2. Returnera HTML (View Layer)
    return render_template(
        'admin_bostader_lista.html',
        bostader=alla_bostader,
        titel='Administration av Bost√§der'
    )


# ============================================================
# 2. FORMUL√ÑR (CREATE & UPDATE) - L√§gg till eller redigera
# ============================================================

# Tv√• URL:er hanteras av samma funktion: /admin/add och /admin/edit/<id>
@admin_bp.route('/add', methods=['GET', 'POST'])
@admin_bp.route('/edit/<int:bostad_id>', methods=['GET', 'POST'])
@login_required 
def admin_form(bostad_id=None):
    """
    Hantera logiken f√∂r att antingen visa formul√§ret (GET) eller spara data (POST).
    """
    bostad = None
    titel = "L√§gg till ny bostad"

    # --------------------------------------------------------
    # A. Redigeringsl√§ge? (bostad_id √§r angivet)
    # --------------------------------------------------------
    if bostad_id:
        # H√§mta befintlig bostad via Repository
        bostad = bostad_repo.hamta_en(bostad_id)

        if bostad is None:
            # Stoppar k√∂rningen och visar 404-sida om ID:t √§r ogiltigt
            abort(404) 

        titel = f"Redigera: {bostad.adress}"

    # --------------------------------------------------------
    # B. Formul√§r inskickat (POST-metod)
    # --------------------------------------------------------
    if request.method == 'POST':
        # 1. Validera och rensa data via Hj√§lpfunktion
        form_data = validera_formular(request.form)

        if form_data is None:
            # 2. Validering misslyckades: Visa felmeddelande
            flash('Ogiltiga formul√§rdata. Kontrollera dina v√§rden.', 'error')
        else:
            # 3. Validering lyckades: Anropa Repository f√∂r att spara
            if bostad_id:
                # UPPDATERA
                bostad_repo.uppdatera(bostad_id, form_data)
                flash(f'Bostad "{form_data["adress"]}" har uppdaterats!', 'success')
            else:
                # SKAPA NY
                ny_bostad = bostad_repo.skapa_ny(form_data)
                flash(f'Ny bostad "{ny_bostad.adress}" har lagts till!', 'success')

            # 4. PRG-m√∂nstret (Post/Redirect/Get): Omdirigera f√∂r att f√∂rhindra dubbel-submission
            return redirect(url_for('.admin_lista_bostader'))

    # --------------------------------------------------------
    # C. Visa formul√§ret (GET-metod)
    # --------------------------------------------------------
    return render_template(
        'admin_bostader_form.html',
        bostad=bostad, # Skickar antingen det befintliga objektet eller None
        titel=titel
    )


# ============================================================
# 3. RADERA (DELETE) - Ta bort en bostad
# ============================================================

@admin_bp.route('/delete/<int:bostad_id>', methods=['POST'])
@login_required 
def admin_delete(bostad_id):
    """
    Raderar en bostad. Anv√§nder POST-metod f√∂r s√§kerhet mot CSRF/slumpm√§ssiga klick.
    """
    # 1. H√§mta objektet F√ñRST (f√∂r att f√• dess namn till meddelandet)
    bostad = bostad_repo.hamta_en(bostad_id)

    if bostad:
        adress = bostad.adress
        # 2. Anropa Repository f√∂r radering
        bostad_repo.radera(bostad_id)
        flash(f'Bostad "{adress}" har tagits bort!', 'success')
    else:
        flash('Bostaden kunde inte hittas.', 'error')

    # 3. G√• tillbaka till listan
    return redirect(url_for('.admin_lista_bostader'))


# ============================================================
# HJ√ÑLPFUNKTIONER (Validering)
# ============================================================

def validera_formular(form_data):
    """
    Validerar, konverterar datatyper och rensar formul√§rdata.

    SINGLE RESPONSIBILITY: Detta √§r en isolerad funktion som hanterar
    all komplexitet kring formul√§rdata och felhantering.

    Returns:
        dict: Validerad data (med korrekta Python-typer), eller None om valideringen misslyckades.
    """
    try:
        # H√§mta, rensa (strip) och konvertera till korrekta typer
        data = {
            'adress': form_data['adress'].strip(),
            'stad': form_data['stad'].strip(),
            'pris': form_data['pris'].strip(),
            # F√∂rs√∂k konvertera till heltal: detta utl√∂ser ValueError om det misslyckas
            'rum': int(form_data['rum']), 
            'yta': int(form_data['yta']),
            'beskrivning': form_data['beskrivning'].strip()
        }

        # Aff√§rsvalidering (t.ex. s√§kerst√§lla att v√§rden √§r rimliga)
        if not data['adress'] or not data['stad']:
            return None # Saknar adress/stad
        
        if data['rum'] < 1 or data['yta'] < 1:
            return None # Rum eller yta m√•ste vara minst 1

        return data

    except (KeyError, ValueError):
        # F√•ngar fel om ett f√§lt saknas (KeyError) eller om konvertering till int misslyckas (ValueError)
        return None