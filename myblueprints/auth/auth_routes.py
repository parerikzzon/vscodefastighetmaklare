# blueprints/auth/auth_routes.py
"""
游댐 AUTH ROUTES - Hanterar URL:er f칬r inloggning och utloggning.

SINGLE RESPONSIBILITY: Fungerar som "Controller"-lagret f칬r autentisering.
- Tar emot inloggningsformul칛r.
- Anv칛nder user_repo f칬r att sl친 upp anv칛ndare i databasen.
- Anv칛nder Flask-Login f칬r att hantera sessioner (login_user, logout_user).
"""
from flask import Blueprint, render_template, request, redirect, url_for, flash
# login_user, logout_user, login_required 칛r Flask-Logins centrala funktioner
from flask_login import login_user, logout_user, login_required 

# Importera blueprint-objektet och user_repo fr친n __init__.py
from . import auth_bp
from . import user_repo


# ============================================================
# 1. INLOGGNING (LOGIN)
# ============================================================

# url_prefix /auth anv칛nds ofta f칬r auth-blueprints (i detta fall: /auth/login)
@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    """
    Visar inloggningsformul칛ret (GET) eller behandlar inloggningsf칬rs칬ket (POST).
    """
    
    if request.method == 'POST':
        # H칛mta data fr친n formul칛ret
        username = request.form['username']
        password = request.form['password']

        # 1. AUTENTISERING: H칛mta anv칛ndaren via unikt anv칛ndarnamn
        user = user_repo.hamta_user_username(username=username)
        
        # J칛mf칬r: Kontrollera om anv칛ndaren finns OCH om l칬senordet matchar
        # OBS! I en riktig app ska l칬senordsj칛mf칬relsen ske mot det HASHADE l칬senordet.
        if user and user.password == password: 
            
            # Autentisering lyckades! 
            # Flask-Login skapar en session (cookie) f칬r anv칛ndaren.
            login_user(user)
            
            # 2. AUKTORISATION: Kontrollera anv칛ndarroll f칬r omdirigering
            if user.role == 'admin':
                flash('Administrat칬rsinloggning lyckades!', 'success')
                # Omdirigera admin till admin-panelen
                # 'admin_bp.admin_lista_bostader' 칛r blueprintnamn.funktionsnamn
                return redirect(url_for('admin_bp.admin_lista_bostader'))
            else:
                # Omdirigera vanliga anv칛ndare till startsidan
                
                # L칛gg till varning om otillr칛cklig beh칬righet
                flash('Inloggning lyckades! Men din anv칛ndarroll (' + user.role + ') har inte beh칬righet att administrera sidan. S친 logga ut och logga in som admin', 'warning')
                # url_for('index') f칬ruts칛tter att du har en rutt med namnet 'index' (vanligtvis startsidan)
                return redirect(url_for('index')) 
        else:
            # Autentisering misslyckades (anv칛ndare hittades inte eller l칬senord fel)
            flash('Felaktigt anv칛ndarnamn eller l칬senord.', 'error')

    # Om metoden 칛r GET (eller om POST misslyckades), visa formul칛ret
    return render_template('login.html')

# ============================================================
# 2. UTLOGGNING (LOGOUT)
# ============================================================

@auth_bp.route('/logout')
@login_required # Man m친ste vara inloggad f칬r att kunna logga ut
def logout():
    """
    Loggar ut den aktuella anv칛ndaren och rensar sessionen.
    """
    # Flask-Login raderar anv칛ndarsessionen
    logout_user() 
    flash('Du har loggats ut.', 'info')
    # Omdirigera tillbaka till inloggningssidan
    return redirect(url_for('auth_bp.login'))